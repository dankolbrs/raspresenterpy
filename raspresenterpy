#! /usr/bin/python
# -*- coding: utf-8 -*-


# source: http://stackoverflow.com/questions/6513311/pyqt-web-browser-focus-on-the-webpage-without-a-mouse-click

"""
#include <QtGui>
#include <QtWebKit>
 
 
int main(int argc, char **argv){
  QApplication app(argc, argv);
  QWebView wv;
  QWebPage *page = wv.page();
  QWebSettings *settings = page->settings();
  settings->setAttribute(QWebSettings::JavascriptEnabled, true);
  settings->setAttribute(QWebSettings::PluginsEnabled, true);
  wv.load(QUrl("http://www.youtube.com"));
  wv.show();
  return app.exec();
}
"""

import sys, os, time, re
import urllib
try:
    from PyQt4.QtCore import *
    from PyQt4.QtGui import *
    from PyQt4.QtWebKit import *
except ImportError:
    print "You need to install PythonQt in order to run this."
    sys.exit(1)

TIMER = 60

DEBUG = True

def debug(msg):
    if DEBUG:
        sys.stdout.write("%s\n" % msg)

class raspresenterpy(QDialog):
    def __init__(self):
        QDialog.__init__(self)
        self.URLS = []
        self.url = ''
        self.web = QWebView()

        self.readconf()
        
        debug("Starting thread")
        self.th = QtBrowser(parent = self)
        self.th.start()

        self.web.loadFinished.connect(self.web.setFocus)
        self.web.showFullScreen()
        
    def usage(self, errno = 1):
        print "Use: %s <raspresenterpy.conf>" % sys.argv[0]
        sys.exit(errno)

    def readconf(self):
        try:
            conf = sys.argv[1]
            conflines = open(conf).readlines()
        except IOError as e:
            print e.strerror
            self.usage(e.errno)
        except IndexError as e:
            print e
            self.usage()

        for line in conflines:
            if not re.search("^http", line):
                continue
            debug("reading: %s" % line.rstrip())
            self.URLS.append(line.rstrip())

    def update(self):
        debug("Updating to: %s" % self.url)
        # freeing memory
        QWebSettings.clearMemoryCaches()
        QWebSettings.OfflineStorageDatabaseEnabled = 1
        QWebSettings.OfflineWebApplicationCacheEnabled = 1
        QWebSettings.AcceleratedCompositingEnabled = 1
        QWebSettings.TiledBackingStoreEnabled = 1
        self.web.load(QUrl(self.url))

    def cleanupmemory(self):
        """
        Forcing to clean up memory to avoid OOM errors
        """
        debug("Forcing memory cleanup by QWebView() object recreation")
        self.web.close()
        self.web = QWebView()
        self.web.loadFinished.connect(self.web.setFocus)
        self.web.showFullScreen()


        
    def show(self):
        debug("Connecting SIGNAL")
        self.connect(self.th,
                     SIGNAL("update"),
                     self.update)
        debug("Starting app")
        # Forcing HTML5 settings to be enabled.
        """
        QWebView *webView = new QWebView();
        webView->settings()->setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls, true);
        webView->page()->settings()->setAttribute(QWebSettings::JavascriptEnabled, true);
        webView->page()->settings()->setAttribute(QWebSettings::OfflineWebApplicationCacheEnabled, true);
        webView->page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);
        webView->settings()->setUserStyleSheetUrl(QUrl("qrc:/path-your-css-file-in-resource-file.css"));
        """
        QWebSettings.JavascriptEnabled = 1
        QWebSettings.PluginsEnabled = 1
        QWebSettings.OfflineStorageDatabaseEnabled = 1
        QWebSettings.OfflineWebApplicationCacheEnabled = 1
        QWebSettings.AcceleratedCompositingEnabled = 1
        QWebSettings.TiledBackingStoreEnabled = 1
        
class QtBrowser(QThread):
    def __init__(self, parent = None):
        debug("Starting QtBrowser")
        QThread.__init__(self, parent = None)
        self.p = parent


    def run(self):
        while True:
            for url in self.p.URLS:
                # Let's check first if it is available
                try:
                    w = urllib.urlopen(url)
                except IOError:
                    debug("Link %s has I/O error" % url)
                    continue
                if (w.getcode() != 200):
                    debug("Link %s shows error: %d" % (url,w.getcode()))
                    continue
                debug("Threading updating url to: %s" % url)
                self.p.url = url
                self.emit(SIGNAL("update"))
                self.sleep(TIMER)
        self.p.cleanupmemory()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = raspresenterpy()
    win.show()
    sys.exit(app.exec_())
